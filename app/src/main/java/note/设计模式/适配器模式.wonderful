适配器模式：创建一个符合我们多种需求的扩展类
描述：当我们需要一个类，既拥有方法a也拥有方法b，而我们已有的当前类中仅仅拥有a方法，
      并且这个已知类由于不知道源码或是不希望去修改源码,这时我们便可以使用适配器方式。
分类：类的适配器模式、对象的适配器模式
一：类适配器模式：(针对于方法的组合)
    1.已知类adaptee
    public class Adaptee {
        public void a(){}
    }
    2.定义目标类需要的规则（必须满足既有方法a又有方法b）接口Target
    public interface Target {
        public void a();//已知类已有的方法
        public void b();//需要拓展的方法
    }
    3.创建适配器即我们的目标类
    public class Adapter extends Adaptee implements Target {//这里采用的是继承的方式
        @Override
        public void b() {
            //写相关的代码逻辑
        }
    }
二、对象的适配器模式
     1.已知类adaptee
     public class Adaptee {
         public void a(){}
     }
     2.定义目标类需要的规则（必须满足既有方法a又有方法b）接口Target
       public interface Target {
           public void a();//已知类已有的方法
           public void b();//需要拓展的方法
       }
     3.创建适配器即我们的目标类
          public class Adapter {
              private Adaptee adaptee;//这里采用的是对象引入的方法
              public Adapter(Adaptee adaptee){
                  this.adaptee = adaptee;
              }
              public void a(){
                  this.adaptee.a();
              }
              public void b(){
                  //写相关的代码
              }
          }
三、两种适配器模式的比较
     1.类适配器使用对象继承的方式，是静态的定义方式；而对象适配器使用对象组合的方式，是动态组合的方式。
     2.对于类适配器，由于适配器直接继承了Adaptee，使得适配器不能和Adaptee的子类一起工作，因为继承是静态的关系，
     当适配器继承了Adaptee后，就不可能再去处理Adaptee的子类了。
     3.对于对象适配器，一个适配器可以把多种不同的源适配到同一个目标。换言之，同一个适配器可以把源类和它的子类都适配到目标接口。
     因为对象适配器采用的是对象组合的关系，只要对象类型正确，是不是子类都无所谓。
     4.对于类适配器，适配器可以重定义Adaptee的部分行为，相当于子类覆盖父类的部分实现方法。
     5.对于对象适配器，要重定义Adaptee的行为比较困难，这种情况下，需要定义Adaptee的子类来实现重定义，然后让适配器组合子类。
     虽然重定义Adaptee的行为比较困难，但是想要增加一些新的行为则方便的很，而且新增加的行为可同时适用于所有的源。
     6.对于类适配器，仅仅引入了一个对象，并不需要额外的引用来间接得到Adaptee。
     7.对于对象适配器，需要额外的引用来间接得到Adaptee。
四、适配器模式的缺点
     过多的使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是A接口，其实内部被适配成了B接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。
五、缺省适配器模式  缺省适配模式是一种“平庸”化的适配器模式。
     描述：很多时候必须让一个类实现某一接口，但是这个类又不必实现所有的方法，所以有些抽象方法必定是空着的。而这些空着的方法，对于代码而言很可能就是增加混乱，也不利于排版，也是一种浪费。
     　    缺省适配模式可以很好的处理这一情况。可以设计一个抽象的适配器类实现接口，此抽象类要给接口所要求的每一种方法都提供一个空的方法。这样子类就可以选择来覆盖实现某一方法.
    1.定义规则的接口
      public interface AbstractService {
          public void a();
          public int b();
          public String c();
      }
    2.空实现的适配器adapter
     public abstract class Adapter implements AbstractService{
         @Override
         public void a() {}
         @Override
         public int b() { return 0; }
         @Override
         public String c() { return null; }
     }
     3.需要的类集成这一适配器即可
























