外观者模式:对于一个子系统，程序对外隐藏具体的实现，只提供一个简单的调用方法。
   优点：　松散耦合   门面模式松散了客户端与子系统的耦合关系，让子系统内部的模块能更容易扩展和维护。
           简单易用   门面模式让子系统更加易用，客户端不再需要了解子系统内部的实现，也不需要跟众多子系统内部的模块进行交互，
                      只需要跟门面类交互就可以了。
           更好的划分访问层次   通过合理使用外观者，可以帮助我们更好地划分访问的层次。有些方法是对系统外的，有些方法是系统内部使用的。
           把需要暴露给外部的功能集中到门面中，这样既方便客户端使用，也很好地隐藏了内部的细节。
示例：
    1.模块一
        public class ModuleA {
            public void testA(){
                System.out.println("调用ModuleA中的testA方法");
            }
        }
    2.模块二
        public class ModuleB {
            public void testB(){
                System.out.println("调用ModuleB中的testB方法");
            }
        }
    3.模块三
        public class ModuleC {
            public void testC(){
                System.out.println("调用ModuleC中的testC方法");
            }
        }
    4.外观者
        public class Facade {
            public void test(){
                ModuleA a = new ModuleA();
                a.testA();
                ModuleB b = new ModuleB();
                b.testB();
                ModuleC c = new ModuleC();
                c.testC();
            }
        }






























