模板方法模式：
    准备一个抽象类，将部分逻辑以具体方法以及具体构造函数的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。
    不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。这就是模板方法模式的用意。
一、通用示例
    1.抽象模板角色类
        定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。
        定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，
        而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。
            public abstract class AbstractTemplate {
                /** 模板方法 */
                public void templateMethod(){
                    //调用基本方法
                    abstractMethod();
                    hookMethod();
                    concreteMethod();
                }
                /** 基本方法的声明（由子类实现） */
                protected abstract void abstractMethod();
                /**  基本方法(空方法) */
                protected void hookMethod(){}
                /** 基本方法（已经实现） */
                private final void concreteMethod(){
                    //业务相关的代码
                }
            }
        2.具体模板角色类
            实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。
            每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法
            （也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。
                public class ConcreteTemplate extends AbstractTemplate{
                    //基本方法的实现
                    @Override
                    public void abstractMethod() {
                        //业务相关的代码
                    }
                    //重写父类的方法
                    @Override
                    public void hookMethod() {
                        //业务相关的代码
                    }
                }
    模板模式的关键是：子类可以置换掉父类的可变部分，但是子类却不可以改变模板方法所代表的顶级逻辑。
二、模板方法模式中的方法
        模板方法中的方法可以分为两大类：模板方法和基本方法。
    模板方法：
        一个模板方法是定义在抽象类中的，把基本操作方法组合在一起形成一个总算法或一个总行为的方法。
        一个抽象类可以有任意多个模板方法，而不限于一个。每一个模板方法都可以调用任意多个具体方法。
    基本方法：
        抽象方法：一个抽象方法由抽象类声明，由具体子类实现。
        具体方法：一个具体方法由抽象类声明并实现，而子类并不实现或置换。
        钩子方法：一个钩子方法由抽象类声明并实现，而子类会加以扩展。通常抽象类给出的实现是一个空实现，作为方法的默认实现。
                 钩子方法的名字应当以do开始，这是熟悉设计模式的Java开发人员的标准做法。如doGet()、doPost()等方法。
三、具体示例：
        计算存款利息系统支持两种存款账号，货币市场账号、定期存款账号，这两种存款利息是不同的。
        所以在计算一个用户的存款利息额时，就必须区分这两种不同的账号。
    分析：
        这个系统的总行为应当是计算出利息，这也就决定了作为一个模板方法模式的顶级逻辑应当是利息计算。
        由于利息计算涉及到两个步骤：一个基本方法给出账号种类，另一个基本方法给出利息百分比。
        这两个基本方法构成具体逻辑，因为账号的类型不同，所以具体逻辑会有所不同。
    1.抽象模板角色
        public abstract class Account {
            /**  模板方法，计算利息数额    @return    返回利息数额 */
            public final double calculateInterest(){
                double interestRate = doCalculateInterestRate();
                String accountType = doCalculateAccountType();
                double amount = calculateAmount(accountType);
                return amount * interestRate;
            }
            /** 基本方法留给子类实现 */
            protected abstract String doCalculateAccountType();
            /**  基本方法留给子类实现 */
            protected abstract double doCalculateInterestRate();
            /**  基本方法，已经实现 */
            private double calculateAmount(String accountType){
                /** 省略相关的业务逻辑  */
                return 7243.00;
            }
        }
    2.具体模板角色类
            ——》 货币市场账号
        public class MoneyMarketAccount extends Account {
            @Override
            protected String doCalculateAccountType() {
                return "Money Market";
            }
            @Override
            protected double doCalculateInterestRate() {
                return 0.045;
            }
        }
            ——》定期存款账号
        public class CDAccount extends Account {
            @Override
            protected String doCalculateAccountType() {
                return "Certificate of Deposite";
            }
            @Override
            protected double doCalculateInterestRate() {
                return 0.06;
            }
        }
    3.客户端调用
         Account account = new MoneyMarketAccount();
         System.out.println("货币市场账号的利息数额为：" + account.calculateInterest());
         account = new CDAccount();
         System.out.println("定期账号的利息数额为：" + account.calculateInterest());















