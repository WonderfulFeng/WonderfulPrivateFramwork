备忘录模式：
    备忘录对象是一个用来存储另外一个对象内部状态的快照的对象。备忘录模式的用意是在不破坏封装的条件下，
    将一个对象的状态捕捉(Capture)住，并外部化，存储起来，从而可以在将来合适的时候把这个对象还原到存储起来的状态。
    备忘录模式常常与命令模式和迭代子模式一同使用。
    示例：
一、白箱备忘录
    备忘录角色对任何对象都提供一个接口，即宽接口，备忘录角色的内部所存储的状态就对所有对象公开。因此这个实现又叫做“白箱实现”。
    1.发起人角色  发起人角色利用一个新创建的备忘录对象将自己的内部状态存储起来
        public class Originator {
            private String state;
            /** 工厂方法，返回一个新的备忘录对象 */
            public Memento createMemento(){
                return new Memento(state);
            }
            /** 将发起人恢复到备忘录对象所记载的状态 */
            public void restoreMemento(Memento memento){
                this.state = memento.getState();
            }
            public String getState() {
                return state;
            }
            public void setState(String state) {
                this.state = state;
                System.out.println("当前状态：" + this.state);
            }
        }
    2.备忘录角色类  备忘录对象将发起人对象传入的状态存储起来。
        public class Memento {
            private String state;
            public Memento(String state){
                this.state = state;
            }
            public String getState() {
                return state;
            }
            public void setState(String state) {
                this.state = state;
            }
        }
    3.负责人角色类  负责人角色负责保存备忘录对象，但是从不修改（甚至不查看）备忘录对象的内容。
        public class Caretaker {
            private Memento memento;
            /** 备忘录的取值方法 */
            public Memento retrieveMemento(){
                return this.memento;
            }
            /**  备忘录的赋值方法 */
            public void saveMemento(Memento memento){
                this.memento = memento;
            }
        }
    4.客户端调用
        Originator o = new Originator();
        Caretaker c = new Caretaker();
        //改变负责人对象的状态
        o.setState("On");
        //创建备忘录对象，并将发起人对象的状态储存起来
        c.saveMemento(o.createMemento());
        //修改发起人的状态
        o.setState("Off");
        //恢复发起人对象的状态
        o.restoreMemento(c.retrieveMemento());
        System.out.println(o.getState());
    分析：首先将发起人对象的状态设置成“On”，并创建一个备忘录对象将这个状态存储起来；然后将发起人对象的状态改成“Off”；
          最后又将发起人对象恢复到备忘录对象所存储起来的状态，即“On”状态。
二、黑箱备忘录
    　备忘录角色对发起人（Originator）角色对象提供一个宽接口，而为其他对象提供一个窄接口。这样的实现叫做“黑箱实现”。
      在JAVA语言中，实现双重接口的办法就是将备忘录角色类设计成发起人角色类的内部成员类。
    1.发起人角色  发起人角色类Originator中定义了一个内部的Memento类。由于此Memento类的全部接口都是私有的，
       因此只有它自己和发起人类可以调用。
    public class Originator {
        private String state;
        public String getState() {
            return state;
        }
        public void setState(String state) {
            this.state = state;
            System.out.println("赋值状态：" + state);
        }
        /** 工厂方法，返还一个新的备忘录对象  */
        public MementoIF createMemento(){
            return new Memento(state);
        }
        /** 发起人恢复到备忘录对象记录的状态 */
        public void restoreMemento(MementoIF memento){
            this.setState(((Memento)memento).getState());
        }

    2.备忘录角色类，备忘录对象将发起人对象传入的状态存储起来。
        private class Memento implements MementoIF{
            private String state;
            /**  构造方法  */
            private Memento(String state){
                this.state = state;
            }
            private String getState() {
                return state;
            }
            private void setState(String state) {
                this.state = state;
            }
        }
    }
    3.负责人角色类  负责人角色负责保存备忘录对象，但是从不修改（甚至不查看）备忘录对象的内容。
        public class Caretaker {
            private Memento memento;
            /** 备忘录的取值方法 */
            public Memento retrieveMemento(){
                return this.memento;
            }
            /** 备忘录的赋值方法 */
            public void saveMemento(Memento memento){
                this.memento = memento;
            }
        }
    4.客户端调用
       Originator o = new Originator();
       Caretaker c = new Caretaker();
       //改变负责人对象的状态
       o.setState("On");
       //创建备忘录对象，并将发起人对象的状态存储起来
       c.saveMemento(o.createMemento());
       //修改发起人对象的状态
       o.setState("Off");
       //恢复发起人对象的状态
       o.restoreMemento(c.retrieveMemento());

三、多重检查点
    前面所给出的白箱和黑箱的示意性实现都是只存储一个状态的简单实现，也可以叫做只有一个检查点。
    常见的系统往往需要存储不止一个状态，而是需要存储多个状态，或者叫做有多个检查点。
    备忘录模式可以将发起人对象的状态存储到备忘录对象里面，备忘录模式可以将发起人对象恢复到备忘录对象所存储的某一个检查点上
    1.发起人角色
        public class Originator {
            private List<String> states;
            private int index;  //检查点指数
            /** 构造函数 */
            public Originator(){
                states = new ArrayList<String>();
                index = 0;
            }
            /** 工厂方法，返还一个新的备忘录对象 */
            public Memento createMemento(){
                return new Memento(states , index);
            }
            /**  将发起人恢复到备忘录对象记录的状态上 */
            public void restoreMemento(Memento memento){
                states = memento.getStates();
                index = memento.getIndex();
            }
            /** 状态的赋值方法 */
            public void setState(String state){
                states.add(state);
                index++;
            }
            /** 辅助方法，打印所有状态 */
            public void printStates(){
                for(String state : states){
                    System.out.println(state);
                }
            }
        }
    2.备忘录角色类，这个实现可以存储任意多的状态，外界可以使用检查点指数index来取出检查点上的状态。　
        public class Memento {
            private List<String> states;
            private int index;
            /** 构造函数 */
            public Memento(List<String> states , int index){
                this.states = new ArrayList<String>(states);
                this.index = index;
            }
            public List<String> getStates() {
                return states;
            }
            public int getIndex() {
                return index;
            }
        }
    3.负责人角色类
        public class Caretaker {
            private Originator o;
            private List<Memento> mementos = new ArrayList<Memento>();
            private int current;
            /** 构造函数 */
            public Caretaker(Originator o){
                this.o = o;
                current = 0;
            }
            /** 创建一个新的检查点 */
            public int createMemento(){
                Memento memento = o.createMemento();
                mementos.add(memento);
                return current++;
            }
            /** 将发起人恢复到某个检查点 */
            public void restoreMemento(int index){
                Memento memento = mementos.get(index);
                o.restoreMemento(memento);
            }
            /** 将某个检查点删除 */
            public void removeMemento(int index){
                mementos.remove(index);
            }
        }
    4.客户端调用
        Originator o = new Originator();
        Caretaker c = new Caretaker(o);
        //改变状态
        o.setState("state 0");
        //建立一个检查点
        c.createMemento();
        //改变状态
        o.setState("state 1");
        //建立一个检查点
        c.createMemento();
        //改变状态
        o.setState("state 2");
        //建立一个检查点
        c.createMemento();
        //改变状态
        o.setState("state 3");
        //建立一个检查点
        c.createMemento();
        //打印出所有检查点
        o.printStates();
        System.out.println("-----------------恢复检查点-----------------");
        //恢复到第二个检查点
        c.restoreMemento(2);
        //打印出所有检查点
        o.printStates();
四、自述历史模式
    所谓“自述历史”模式(History-On-Self Pattern)实际上就是备忘录模式的一个变种。在备忘录模式中，
    发起人(Originator)角色、负责人(Caretaker)角色和备忘录(Memento)角色都是独立的角色。
    虽然在实现上备忘录类可以成为发起人类的内部成员类，但是备忘录类仍然保持作为一个角色的独立意义。
    在“自述历史”模式里面，发起人角色自己兼任负责人角色。
    示例：
    1.窄接口  这是一个标识接口，因此它没有定义出任何的方法。
        public interface MementoIF {
        }
    2.发起人角色同时还兼任负责人角色   它自己负责保持自己的备忘录对象。
        public class Originator {
            public String state;
            /** 改变状态 */
            public void changeState(String state){
                this.state = state;
                System.out.println("状态改变为：" + state);
            }
            /** 工厂方法，返还一个新的备忘录对象 */
            public Memento createMemento(){
                return new Memento(this);
            }
            /** 将发起人恢复到备忘录对象所记录的状态上 */
            public void restoreMemento(MementoIF memento){
                Memento m = (Memento)memento;
                changeState(m.state);
            }
            private class Memento implements MementoIF{
                private String state;
                /**  构造方法 */
                private Memento(Originator o){
                    this.state = o.state;
                }
                private String getState() {
                    return state;
                }
            }
        }
    3.客户端调用
        Originator o = new Originator();
        o.changeState("state 0"); //修改状态
        MementoIF memento = o.createMemento();  //创建备忘录
        o.changeState("state 1"); //修改状态
        o.restoreMemento(memento); //按照备忘录恢复对象的状态












