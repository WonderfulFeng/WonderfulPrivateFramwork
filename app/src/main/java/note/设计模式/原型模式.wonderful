原型模式：
    必须了解的知识，深拷贝与浅拷贝
     一、浅拷贝
        实体类实现Cloneable接口，重写Object的 clone()方法
          public Object clone(){
                Monkey temp = null;
                try {
                    temp = (Monkey) super.clone();
                } catch (CloneNotSupportedException e) {
                    e.printStackTrace();
                } finally {
                    return temp;
                }
            }
          调用：Entity temp = (Entity)entity.clone();
          拷贝之后的temp内部分析：temp指向的内存地址与entity指向的内存地址不同，但是如果实体类有引用类型的属性，
          比如包含一个学生对象。那么浅拷贝下这个学生对象在temp和entity这两个对象中，是同一个实例对象，内存地址相同。
     二、深拷贝
        实体类中的所有引用对象也必须调用clone()方法，，因此 实体类中的所有引用对象也必须实现Cloneable接口，实现clone()方法。
        1.实体类内部对象
        class Professor implements Cloneable {
              String name;
              int age;
              Professor(String name,int age) {
                  this.name=name;
                  this.age=age;
              }
             public Object clone() {
                   Object o=null;
                  try{
                        o=super.clone();
                   } catch(CloneNotSupportedException e){
                        System.out.println(e.toString());
                   }
                  return o;
              }
        }
        2.外部实体类
        public class Student implements Cloneable{
              String name;
              int age;
              Professor p;
             Student(String name,int age,Professor p){
                  this.name=name;
                  this.age=age;
                  this.p=p;
              }
             public Object clone(){
                   Student o=null;
              try{
                    o=(Student)super.clone();
               }catch(CloneNotSupportedException e){
                    System.out.println(e.toString());
               }
                   o.p=(Professor)p.clone(); //对引用的对象也进行复制
                   return o;
              }
         }
          调用：Student temp = (Student)stu.clone();
              拷贝之后的temp内部分析：temp指向的内存地址与stu指向的内存地址不同，内部引用对象内存地址与stu内部的内存地址也不相同(完全拷贝)
     三.对于支持可序列化的实体类，也可用序列化方式，来拷贝对象
         public  Object deepClone() throws IOException, ClassNotFoundException{
                //将对象写到流里
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                ObjectOutputStream oos = new ObjectOutputStream(bos);
                oos.writeObject(this);
                //从流里读回来
                ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
                ObjectInputStream ois = new ObjectInputStream(bis);
                return ois.readObject();
            }
            注：　这样做的前提就是对象以及对象内部所有引用到的对象都是可序列化的，否则，就需要仔细考察那些不可序列化的对象可否设成transient，从而将之排除在复制过程之外。
              　　有一些对象，比如线程(Thread)对象或Socket对象，是不能简单复制或共享的。不管是使用浅度克隆还是深度克隆，只要涉及这样的间接对象，
                  就必须把间接对象设成transient而不予复制；或者由程序自行创建出相当的同种对象，权且当做复制件使用。
     四、原型模式的分类
        1.简单的原型模式  （简单来说就是在实体类中写一个拷贝自己的方法供外界调用）
        2.登记形式的原型模式
         (1).抽象原型
            public interface Prototype{
                public Prototype clone();//定义一个共有方法
                public String getName();
                public void setName(String name);
            }
         (2).具体原型1
            public class ConcretePrototype1 implements Prototype {
                private String name;
                public Prototype clone(){
                    ConcretePrototype1 prototype = new ConcretePrototype1();
                    prototype.setName(this.name);
                    return prototype;
                }
                public String toString(){
                    return "Now in Prototype1 , name = " + this.name;
                }
                @Override
                public String getName() {
                    return name;
                }
                @Override
                public void setName(String name) {
                    this.name = name;
                }
            }
          (3).具体原型2
            public class ConcretePrototype2 implements Prototype {
                private String name;
                public Prototype clone(){
                    ConcretePrototype2 prototype = new ConcretePrototype2();
                    prototype.setName(this.name);
                    return prototype;
                }
                public String toString(){
                    return "Now in Prototype2 , name = " + this.name;
                }
                @Override
                public String getName() {
                    return name;
                }
                @Override
                public void setName(String name) {
                    this.name = name;
                }
            }
          (4).原型管理器
             原型管理器角色保持一个聚集，作为对所有原型对象的登记，这个角色提供必要的方法，
             供外界增加新的原型对象和取得已经登记过的原型对象。
                public class PrototypeManager {
                    /** 用来记录原型的编号和原型实例的对应关系 */
                    private static Map<String,Prototype> map = new HashMap<String,Prototype>();
                    /** 私有化构造方法，避免外部创建实例 */
                    private PrototypeManager(){}
                    /** 向原型管理器里面添加或是修改某个原型注册 prototypeId 原型编号   prototype  原型实例 */
                    public synchronized static void addPrototype(String prototypeId , Prototype prototype){
                        map.put(prototypeId, prototype);
                    }
                    /** 从原型管理器里面删除某个原型注册 prototypeId 原型编号 */
                    public synchronized static void removePrototype(String prototypeId){
                        map.remove(prototypeId);
                    }
                    /**
                     * 获取某个原型编号对应的原型实例
                     * @param prototypeId    原型编号
                     * @return    原型编号对应的原型实例
                     * @throws Exception    如果原型编号对应的实例不存在，则抛出异常
                     */
                    public synchronized static Prototype getPrototype(String prototypeId) throws Exception{
                        Prototype prototype = map.get(prototypeId);
                        if(prototype == null){
                            throw new Exception("您希望获取的原型还没有注册或已被销毁");
                        }
                        return prototype;
                    }
                }
             (5).调用示例：
                public class Client {
                    public static void main(String[]args){
                        try{
                            Prototype p1 = new ConcretePrototype1();
                            PrototypeManager.addPrototype("p1", p1);
                            //获取原型来创建对象
                            Prototype p3 = PrototypeManager.getPrototype("p1").clone();
                            p3.setName("张三");
                            System.out.println("第一个实例：" + p3);
                            //有人动态的切换了实现
                            Prototype p2 = new ConcretePrototype2();
                            PrototypeManager.addPrototype("p1", p2);
                            //重新获取原型来创建对象
                            Prototype p4 = PrototypeManager.getPrototype("p1").clone();
                            p4.setName("李四");
                            System.out.println("第二个实例：" + p4);
                            //有人注销了这个原型
                            PrototypeManager.removePrototype("p1");
                            //再次获取原型来创建对象
                            Prototype p5 = PrototypeManager.getPrototype("p1").clone();
                            p5.setName("王五");
                            System.out.println("第三个实例：" + p5);
                        }catch(Exception e){
                            e.printStackTrace();
                        }
                    }
                }
              两种形式的比较
              　　简单形式和登记形式的原型模式各有其长处和短处。
              　　如果需要创建的原型对象数目较少而且比较固定的话，可以采取第一种形式。在这种情况下，原型对象的引用可以由客户端自己保存。
              　　如果要创建的原型对象数目不固定的话，可以采取第二种形式。在这种情况下，客户端不保存对原型对象的引用，这个任务被交给管理员对象。
                  在复制一个原型对象之前，客户端可以查看管理员对象是否已经有一个满足要求的原型对象。如果有，可以直接从管理员类取得这个对象引用；
                  如果没有，客户端就需要自行复制此原型对象。



























