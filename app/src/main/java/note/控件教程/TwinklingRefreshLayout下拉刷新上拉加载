TwinklingRefreshLayout
Github：https://github.com/lcodecorex/TwinklingRefreshLayout
1.简介
TwinklingRefreshLayout延伸了Google的SwipeRefreshLayout的思想,不在列表控件上动刀,而是使用一个ViewGroup来包含列表控件,以保持其较低的耦合性和较高的通用性。其主要特性有：
    支持RecyclerView、ScrollView、AbsListView系列(ListView、GridView)、WebView以及其它可以获取到scrollY的控件
    支持加载更多
    默认支持 越界回弹，随手势速度有不同的效果
    可开启没有刷新控件的纯净越界回弹模式
    setOnRefreshListener中拥有大量可以回调的方法
    将Header和Footer抽象成了接口,并回调了滑动过程中的系数,方便实现个性化的Header和Footer
    支持NestedScroll,嵌套CoordinatorLayout
目前已经支持了所有的View，比如是一个FrameLayout，LinearLayout,AnyView。2.画布的对象的创建与获取
2.添加依赖
compile 'com.lcodecorex:tkrefreshlayout:1.0.7'
3.XML布局
 xmlns:gyf="http://schemas.android.com/tools"
Android系统为了跟iOS不一样，当界面OverScroll的时候会显示一个阴影。为了达到更好的显示效果，最好禁用系统的overScroll，如上给RecyclerView添加android:overScrollMode="never"
4. .在Activity或者Fragment中配置
TwinklingRefreshLayout不会自动结束刷新或者加载更多，需要手动控制

使用finishRefreshing()方法结束刷新，finishLoadmore()方法结束加载更多。此处OnRefreshListener还有其它方法，可以选择需要的来重写。
如果你想进入到界面的时候主动调用下刷新，可以调用startRefresh()/startLoadmore()方法。
5.内部封装的方法
    setWaveHeight
    setMaxHeadHeight 设置头部可拉伸的最大高度。
    setHeaderHeight 头部固定高度(在此高度上显示刷新状态)
    setMaxBottomHeight
    setBottomHeight 底部高度
    setOverScrollHeight 设置最大的越界高度
    setEnableRefresh、setEnableLoadmore 灵活的设置是否禁用上下拉。
    setHeaderView(IHeaderView headerView)、setBottomView(IBottomView bottomView)  设置头部/底部个性化刷新效果，头部需要实现IHeaderView，底部需要实现IBottomView。
    setEnableOverScroll 是否允许越界回弹。
    setOverScrollTopShow、setOverScrollBottomShow、setOverScrollRefreshShow是否允许在越界的时候显示刷新控件，默认是允许的，也就是Fling越界的时候Header或Footer照常显示，反之就是不显示；可能有特殊的情况，刷新控件会影响显示体验才设立了这个状态。
    setPureScrollModeOn() 开启纯净的越界回弹模式，也就是所有刷新相关的View都不显示，只显示越界回弹效果
    setAutoLoadMore是否在底部越界的时候自动切换到加载更多模式
    addFixedExHeader 添加一个固定在顶部的Header(效果还需要优化)
    setFloatRefresh(boolean) 支持切换到像SwipeRefreshLayout一样的悬浮刷新模式了。
    setTargetView(View view)  设置滚动事件的作用对象。

setDefaultHeader、setDefaultFooter 现在已经提供了设置默认的Header、Footer的static方法，可在Application或者一个Activity中这样设置：
TwinklingRefreshLayout.setDefaultHeader(SinaRefreshView.class.getName());
TwinklingRefreshLayout.setDefaultFooter(BallPulseView.class.getName());
6.拓展属性
    tr_max_head_height 头部拉伸允许的最大高度
    tr_head_height 头部高度
    tr_max_bottom_height
    tr_bottom_height 底部高度
    tr_overscroll_height 允许越界的最大高度
    tr_enable_refresh 是否允许刷新,默认为true
    tr_enable_loadmore 是否允许加载更多,默认为true
    tr_pureScrollMode_on 是否开启纯净的越界回弹模式
    tr_overscroll_top_show 是否允许顶部越界时显示顶部View
    tr_overscroll_bottom_show 是否允许底部越界时显示底部View
    tr_enable_overscroll 是否允许越界回弹
    tr_floatRefresh 开启悬浮刷新模式
    tr_autoLoadMore 越界时自动加载更多
    tr_enable_keepIView 是否在开始刷新之后保持状态，默认为true；若需要保持原来的操作逻辑，这里设置为false即可
    tr_showRefreshingWhenOverScroll 越界时直接显示正在刷新中的头部
    tr_showLoadingWhenOverScroll 越界时直接显示正在加载更多中的底部
7.其他说明
1.默认支持越界回弹，并可以随手势越界不同的高度
	这一点很多类似SwipeRefreshLayout的刷新控件都没有做到(包括SwipeRefreshLayout),因为没有拦截下来的时间会传递给列表控件，而列表控件的滚动状态很难获取。解决方案就是给列表控件设置了OnTouchListener并把事件交给GestureDetector处理,然后在列表控件的OnScrollListener中监听View是否滚动到了顶部(没有OnScrollListener的则采用延时监听策略)。
2.setOnRefreshListener大量可以回调的方法
    onPullingDown(TwinklingRefreshLayout refreshLayout, float fraction) 正在下拉的过程
    onPullingUp(TwinklingRefreshLayout refreshLayout, float fraction) 正在上拉的过程
    onPullDownReleasing(TwinklingRefreshLayout refreshLayout, float fraction) 下拉释放过程
    onPullUpReleasing(TwinklingRefreshLayout refreshLayout, float fraction) 上拉释放过程
    onRefresh(TwinklingRefreshLayout refreshLayout) 正在刷新
    onLoadMore(TwinklingRefreshLayout refreshLayout) 正在加载更多
	其中fraction表示当前下拉的距离与Header高度的比值(或者当前上拉距离与Footer高度的比值)。
3.Header和Footer


8.实现个性化的Header和Footer
相关接口分别为IHeaderView和IBottomView,代码如下:

其中getView()方法用于在TwinklingRefreshLayout中获取到实际的Header,因此不能返回null。












