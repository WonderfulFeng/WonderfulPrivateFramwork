ImmersionBar:
一、github地址：https://github.com/gyf-dev/ImmersionBar
    添加依赖：
    compile 'com.gyf.barlibrary:barlibrary:2.3.0'
二、基本用法：
    ImmersionBar.with(this).init();
    更多设置：
    ImmersionBar.with(this)
         .transparentStatusBar()  //透明状态栏，不写默认透明色
         .transparentNavigationBar()  //透明导航栏，不写默认黑色(设置此方法，fullScreen()方法自动为true)
         .transparentBar()             //透明状态栏和导航栏，不写默认状态栏为透明色，导航栏为黑色（设置此方法，fullScreen()方法自动为true）
         .statusBarColor(R.color.colorPrimary)     //状态栏颜色，不写默认透明色
         .navigationBarColor(R.color.colorPrimary) //导航栏颜色，不写默认黑色
         .barColor(R.color.colorPrimary)  //同时自定义状态栏和导航栏颜色，不写默认状态栏为透明色，导航栏为黑色
         .statusBarAlpha(0.3f)  //状态栏透明度，不写默认0.0f
         .navigationBarAlpha(0.4f)  //导航栏透明度，不写默认0.0F
         .barAlpha(0.3f)  //状态栏和导航栏透明度，不写默认0.0f
         .statusBarDarkFont(true)   //状态栏字体是深色，不写默认为亮色
         .flymeOSStatusBarFontColor(R.color.btn3)  //修改flyme OS状态栏字体颜色
         .fullScreen(true)      //有导航栏的情况下，activity全屏显示，也就是activity最下面被导航栏覆盖，不写默认非全屏
         .hideBar(BarHide.FLAG_HIDE_BAR)  //隐藏状态栏或导航栏或两者，不写默认不隐藏
         .addViewSupportTransformColor(toolbar)  //设置支持view变色，可以添加多个view，不指定颜色，默认和状态栏同色，还有两个重载方法
         .titleBar(view)    //解决状态栏和布局重叠问题，任选其一
         .titleBarMarginTop(view)     //解决状态栏和布局重叠问题，任选其一
         .statusBarView(view)  //解决状态栏和布局重叠问题，任选其一
         .fitsSystemWindows(true)    //解决状态栏和布局重叠问题，任选其一，默认为false，当为true时一定要指定statusBarColor()，不然状态栏为透明色，还有一些重载方法
         .supportActionBar(true) //支持ActionBar使用
         .statusBarColorTransform(R.color.orange)  //状态栏变色后的颜色
         .navigationBarColorTransform(R.color.orange) //导航栏变色后的颜色
         .barColorTransform(R.color.orange)  //状态栏和导航栏变色后的颜色
         .removeSupportView(toolbar)  //移除指定view支持
         .removeSupportAllView() //移除全部view支持
         .navigationBarEnable(true)   //是否可以修改导航栏颜色，默认为true
         .navigationBarWithKitkatEnable(true)  //是否可以修改安卓4.4和emui3.1手机导航栏颜色，默认为true
         .fixMarginAtBottom(true)   //已过时，当xml里使用android:fitsSystemWindows="true"属性时,解决4.4和emui3.1手机底部有时会出现多余空白的问题，默认为false，非必须
         .addTag("tag")  //给以上设置的参数打标记
         .getTag("tag")  //根据tag获得沉浸式参数
         .reset()  //重置所以沉浸式参数
         .keyboardEnable(true)  //解决软键盘与底部输入框冲突问题，默认为false，还有一个重载方法，可以指定软键盘mode
         .keyboardMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)  //单独指定软键盘模式
         .setOnKeyboardListener(new OnKeyboardListener() {    //软键盘监听回调
               @Override
               public void onKeyboardChange(boolean isPopup, int keyboardHeight) {
                   LogUtils.e(isPopup);  //isPopup为true，软键盘弹出，为false，软键盘关闭
               }
          })
         .init();  //必须调用方可沉浸式
三、常见使用：
    1.图片状态栏+彩色导航栏：
    immersionbar.statusBarView(T.id.barView)//定义一个高度为0的view,在内部动态的设置其高度为状态栏高度
                .navigationBarColor(R.color.colorPrimary)//设置导航栏颜色，默认黑色
                .init();
    2.全屏图片(包含状态栏和导航栏)：
    immersionBar.titleBar(toolbar, false)
                //指定一个view为其增加一个状态栏高度的pading，参数2状态栏是否支持变色，若true，则改变状态栏透明度时，会逐渐由透明变成默认的不透明黑色；若false，则会跟随标题栏的颜色变化而变化。
                .transparentBar()////透明状态栏和导航栏，不写默认状态栏为透明色，导航栏为黑色（设置此方法，fullScreen()方法自动为true）
                .init();
    3.View跟随状态栏和导航栏一起变色：
    immersionBar.addViewSupportTransformColor(rlTitle, R.color.colorPrimary)//可多次调用添加多个View，还有重载方法，可指定变化前后的颜色
                .navigationBarColorTransform(R.color.orange)//导航栏变化后的颜色
                .statusBarColorTransform(R.color.btn14)//状态栏变化后的颜色
                .barAlpha(alpha)////状态栏和导航栏透明度，不写默认0.0f
                .init();
    4.彩色状态栏 + 彩色导航栏：
     immersionBar.statusBarView(R.id.top_view)//定义一个高度为0的view,在内部动态的设置其高度为状态栏高度
                .statusBarColor(R.color.colorPrimary)//指定状态栏颜色
                .navigationBarColor(R.color.btn8)//指定导航栏颜色
                .init();
    5.左右渐变的状态栏：
     immersionBar.titleBar(R.id.rlTitle)//为标题栏设置渐变的shape背景即可
                 .navigationBarColor(R.color.bt2)
                 .init();
    6.ViewPager + fragment 中的沉浸式： （包含懒加载）
        顶级BaseFragment的OnCreateView中：
            if (isImmersionBarEnabled()) initImmersionBar();
            //具体方法
            protected void initImmersionBar() {
                immersionBar = ImmersionBar.with(this);
                immersionBar.keyboardEnable(true, WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE).init();
            }
        BaseLazyFragment的setUserVisibleHint中：
            if (!isInit) return;
            if (!isNeedLoad) return;
            if (getUserVisibleHint()) {
                loadData();
                isLoad = true;
                if (isImmersionBarEnabled()) initImmersionBar();
            } else {
                if (isLoad) stopLoad();
            }

        a.顶部是banner图、纯色、图片标题栏的fragment，关键代码：(重写initImmersionBar)
            @Override
            protected void initImmersionBar() {
                super.initImmersionBar();
                if (!isSetTitle) {
                    immersionBar.setTitleBar(getActivity(), llTitle);
                    isSetTitle = true;
                }
            }
        b.顶部是白色标题栏的fragment，关键代码：
            @Override
            protected void initImmersionBar() {
                super.initImmersionBar();
                // 原理：如果当前设备支持状态栏字体变色，会设置状态栏字体为黑色，如果当前设备不支持状态栏字体变色，会使当前状态栏加上透明度，否则不执行透明度
                if (getUserVisibleHint()) immersionBar.statusBarDarkFont(true, 0.2f).init();
                if (!isSetTitle) {
                    immersionBar.setTitleBar(getActivity(), llTitle);
                    isSetTitle = true;
                }
            }
        c.监听软键盘的弹出与关闭
            immersionBar.setOnKeyboardListener(new OnKeyboardListener() {
                @Override
                public void onKeyboardChange(boolean isPopup, int keyboardHeight) {
                    //isPopup为true，软键盘弹出，为false，软键盘关闭
                    WonderfulToastUtils.showToast((isPopup ? "软件盘弹出" : "软键盘关闭") + "  高度：" + keyboardHeight);
                }
            });

